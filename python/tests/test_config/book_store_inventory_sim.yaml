simulation:
  base_time_unit: minutes
  terminating_conditions: TIME(480)  # 8 hour business day
  start_date: 2024-01-01
  random_seed: 42

  # Entity inventory configuration - defines what inventory each entity type requires
  entities:
    - entity_table: Order
      inventory_requirements:
        - inventory_table: Book
          selection_strategy: random  # How to select inventory items
          quantity_formula: DISC(0.5, 1, 0.3, 2, 0.15, 3, 0.05, 4)  # Number of different books per order
          quantity_per_item_formula: DISC(0.8, 1, 0.15, 2, 0.05, 3)  # Copies of each book

event_simulation:
  event_flows:
    - flow_id: order_processing_flow
      event_table: Order_Event
      steps:
        # Step 1: Customer creates order
        - step_id: create_order
          step_type: create
          create_config:
            entity_table: Order
            interarrival_time:
              formula: EXPO(15)  # Average 15 minutes between orders
              time_unit: minutes
            max_entities: n/a
          next_steps:
            - check_inventory_availability

        # Step 2: Check if all selected books are in stock
        - step_id: check_inventory_availability
          step_type: decide
          decide_config:
            decision_type: 2way-condition
            outcomes:
              - outcome_id: books_available
                next_step_id: process_payment
                conditions:
                  - if: expression
                    is: ==
                    value: "CHECK_INVENTORY(Entity.selected_inventory, Entity.inventory_quantities)"
                    # Helper function returns true if all inventory items have sufficient quantity
              - outcome_id: insufficient_stock
                next_step_id: handle_backorder
                conditions: []  # Else case - some inventory items out of stock

        # Step 3a: Process payment (books available)
        - step_id: process_payment
          step_type: event
          event_config:
            duration:
              formula: UNIF(1, 3)  # 1-3 minutes for payment processing
              time_unit: minutes
          next_steps:
            - update_inventory

        # Step 3b: Handle backorder situation
        - step_id: handle_backorder
          step_type: decide
          decide_config:
            decision_type: 2way-chance
            outcomes:
              - outcome_id: customer_waits
                next_step_id: schedule_restock
                conditions:
                  - if: Probability
                    is: ==
                    value: 0.6  # 60% of customers wait for restock
              - outcome_id: customer_cancels
                next_step_id: cancel_order
                conditions: []

        # Step 4a: Update inventory (deduct purchased books)
        - step_id: update_inventory
          step_type: assign
          assign_config:
            assignments:
              # Update inventory quantities using SQL UPDATE
              - assignment_type: update
                target_table: Book
                expression: |
                  UPDATE Book 
                  SET quantity = quantity - INVENTORY_QUANTITY(Entity.selected_inventory, Entity.inventory_quantities, Book.id)
                  WHERE Book.id IN INVENTORY_IDS(Entity.selected_inventory)
              # Update order status
              - assignment_type: attribute
                attribute_name: status
                value: confirmed
              # Calculate total amount
              - assignment_type: sql_calculation
                attribute_name: total_amount
                expression: |
                  SELECT SUM(Book.price * INVENTORY_QUANTITY(Entity.selected_inventory, Entity.inventory_quantities, Book.id))
                  FROM Book 
                  WHERE Book.id IN INVENTORY_IDS(Entity.selected_inventory)
          next_steps:
            - fulfill_order

        # Step 4b: Schedule restocking
        - step_id: schedule_restock
          step_type: assign
          assign_config:
            assignments:
              - assignment_type: attribute
                attribute_name: status
                value: awaiting_restock
          next_steps:
            - wait_for_restock

        # Step 4c: Cancel order
        - step_id: cancel_order
          step_type: assign
          assign_config:
            assignments:
              - assignment_type: attribute
                attribute_name: status
                value: cancelled
          next_steps:
            - release_order

        # Step 5a: Fulfill order
        - step_id: fulfill_order
          step_type: event
          event_config:
            duration:
              formula: NORM(10, 2)  # 10 minutes average fulfillment time
              time_unit: minutes
          next_steps:
            - ship_order

        # Step 5b: Wait for restock
        - step_id: wait_for_restock
          step_type: event
          event_config:
            duration:
              formula: UNIF(60, 240)  # 1-4 hours for restocking
              time_unit: minutes
          next_steps:
            - perform_restock

        # Step 6a: Ship order
        - step_id: ship_order
          step_type: assign
          assign_config:
            assignments:
              - assignment_type: attribute
                attribute_name: status
                value: shipped
          next_steps:
            - release_order

        # Step 6b: Perform restocking
        - step_id: perform_restock
          step_type: assign
          assign_config:
            assignments:
              # Restock inventory with new books
              - assignment_type: update
                target_table: Book
                expression: |
                  UPDATE Book 
                  SET quantity = quantity + RANDOM_INT(10, 50)
                  WHERE Book.id IN INVENTORY_IDS(Entity.selected_inventory)
          next_steps:
            - retry_order

        # Step 7: Retry order after restock
        - step_id: retry_order
          step_type: event
          event_config:
            duration:
              formula: 1  # Immediate retry
              time_unit: minutes
          next_steps:
            - check_inventory_availability  # Loop back to inventory check

        # Final step: Release order
        - step_id: release_order
          step_type: release