entities:
  author:
    attributes:
      - name: id
        type: integer
        primary_key: true
      - name: name
        type: string
      - name: birth_date
        type: date
    generation:
      count: 50

  book:
    attributes:
      - name: id
        type: integer
        primary_key: true
      - name: title
        type: string
      - name: isbn
        type: string
      - name: publication_date
        type: date
      - name: author_id
        type: integer
        foreign_key: author.id
      - name: available_copies
        type: integer
    generation:
      count: 200

  member:
    attributes:
      - name: id
        type: integer
        primary_key: true
      - name: name
        type: string
      - name: email
        type: string
      - name: membership_type
        type: enum
        options: [standard, premium, vip]
      - name: join_date
        type: date
    generation:
      count: 100

  loan:
    attributes:
      - name: id
        type: integer
        primary_key: true
      - name: book_id
        type: integer
        foreign_key: book.id
      - name: member_id
        type: integer
        foreign_key: member.id
      - name: loan_date
        type: date
      - name: return_date
        type: date
      - name: status
        type: enum
        options: [active, returned, overdue]
    generation:
      count: 300

relationships:
  - from: author
    to: book
    type: one_to_many
    foreign_key: book.author_id

  - from: book
    to: loan
    type: one_to_many
    foreign_key: loan.book_id

  - from: member
    to: loan
    type: one_to_many
    foreign_key: loan.member_id

rules:
  - name: update_book_availability
    type: update
    target: book
    logic: |
      active_loans = [loan for loan in loan if loan.status == 'active']
      self.available_copies = max(0, self.available_copies - len(active_loans))

  - name: check_overdue_loans
    type: update
    target: loan
    logic: |
      from datetime import datetime, timedelta
      if self.status == 'active' and self.return_date < datetime.now().date():
        self.status = 'overdue'

  - name: update_member_status
    type: update
    target: member
    logic: |
      from datetime import datetime
      member_loans = [loan for loan in loan if loan.status != 'returned']
      if len(member_loans) > 5:
        self.membership_type = 'premium'
      elif (datetime.now().date() - self.join_date).days > 365 and self.membership_type == 'standard':
        self.membership_type = 'vip'