"""
Event-based simulator using SimPy

This module implements a discrete event simulator that processes events
in the order of their primary key values.
"""

import logging
import simpy
import random
import numpy as np
from datetime import datetime, timedelta, time
from typing import Dict, List, Any, Optional, Tuple, Set, Union
from sqlalchemy import create_engine, inspect, select, func, text
from sqlalchemy.orm import Session
from sqlalchemy.pool import NullPool

from src.config_parser import SimulationConfig, EventSimulation, ShiftPattern, ResourceShift
from src.utils.distribution_utils import generate_from_distribution
from .event_tracker import EventTracker

logger = logging.getLogger(__name__)

class EventSimulator:
    """
    Event-based simulator for processing entities through a sequence of events
    
    The simulator uses SimPy to model the discrete event simulation, where:
    - Entities (e.g., Projects, Patients) arrive according to a configured pattern
    - Events (e.g., Deliverables, Treatments) are processed in primary key order
    - Resources (e.g., Consultants, Doctors) are allocated to complete events
    """
    
    def __init__(self, config: SimulationConfig, db_path: str):
        """
        Initialize the simulator
        
        Args:
            config: Simulation configuration
            db_path: Path to the SQLite database
        """
        self.config = config
        self.db_path = db_path
        
        # Use NullPool to avoid connection pool issues with SQLite
        # and enable WAL journal mode for better concurrency
        self.engine = create_engine(
            f"sqlite:///{db_path}?journal_mode=WAL",
            poolclass=NullPool
        )
        
        self.env = None
        self.resources = {}
        self.resource_types = {}  # Maps resource_key to resource_type
        self.entity_count = 0
        self.processed_events = 0
        
        # Set random seed if provided
        if config.random_seed is not None:
            random.seed(config.random_seed)
            np.random.seed(config.random_seed)
            
        # Initialize event tracker
        self.event_tracker = EventTracker(db_path, config.start_date)
    
    def run(self) -> Dict[str, Any]:
        """
        Run the simulation
        
        Returns:
            Dictionary with simulation results
        """
        logger.info(f"Starting simulation for {self.config.duration_days} days")
        
        # Create SimPy environment
        self.env = simpy.Environment()
        
        # Set up resources
        self._setup_resources()
        
        # Start entity generation process
        if self.config.event_simulation and self.config.event_simulation.entity_arrival:
            self.env.process(self._generate_entities())
        
        # Run the simulation
        end_time = self.config.duration_days * 24 * 60  # Convert days to minutes
        self.env.run(until=end_time)
        
        logger.info(f"Simulation completed. Processed {self.processed_events} events for {self.entity_count} entities")
        
        return {
            "duration_days": self.config.duration_days,
            "entity_count": self.entity_count,
            "processed_events": self.processed_events
        }
    
    def _setup_resources(self):
        """Set up resources based on configuration"""
        if not self.config.event_simulation:
            return
            
        with Session(self.engine) as session:
            for resource_config in self.config.event_simulation.resource_requirements:
                table_name = resource_config.resource_table
                type_column = resource_config.type_column
                
                # Get all resources from the database
                sql_query = text(f"SELECT id, {type_column} FROM {table_name}")
                result = session.execute(sql_query)
                resources_by_type = {}
                
                for row in result:
                    resource_type = row[1]
                    if resource_type not in resources_by_type:
                        resources_by_type[resource_type] = []
                    resources_by_type[resource_type].append(row[0])
                
                # Create SimPy resources for each type
                for req in resource_config.requirements:
                    resource_type = req.resource_type
                    if resource_type in resources_by_type:
                        resource_ids = resources_by_type[resource_type]
                        # Create a resource pool for each resource ID
                        for resource_id in resource_ids:
                            resource_key = f"{table_name}_{resource_id}"
                            self.resources[resource_key] = simpy.Resource(self.env, capacity=1)
                            self.resource_types[resource_key] = resource_type
    
    def _generate_entities(self):
        """Generate entities based on arrival pattern"""
        event_sim = self.config.event_simulation
        if not event_sim or not event_sim.entity_arrival:
            return
            
        entity_table = event_sim.entity_table
        arrival_config = event_sim.entity_arrival
        
        # Get the maximum number of entities to generate
        max_entities = arrival_config.max_entities
        
        # Generate entities until max_entities is reached or simulation ends
        while max_entities is None or self.entity_count < max_entities:
            # Generate interarrival time
            interarrival_minutes = generate_from_distribution(
                arrival_config.interarrival_time.get('distribution', {})
            ) * 24 * 60  # Convert days to minutes
            
            # Wait for the next entity arrival
            yield self.env.timeout(interarrival_minutes)
            
            # Record entity arrival
            entity_id = self.entity_count + 1  # Database IDs typically start at 1
            self.event_tracker.record_entity_arrival(
                entity_table=entity_table,
                entity_id=entity_id,
                sim_time=self.env.now
            )
            
            # Process the entity's events
            self.env.process(self._process_entity_events(self.entity_count))
            
            self.entity_count += 1
    
    def _process_entity_events(self, entity_id: int):
        """
        Process all events for an entity in primary key order
        
        Args:
            entity_id: Entity ID
        """
        event_sim = self.config.event_simulation
        if not event_sim:
            return
            
        entity_table = event_sim.entity_table
        event_table = event_sim.event_table
        relationship_column = event_sim.relationship_column
        
        with Session(self.engine) as session:
            # Get all events for this entity, ordered by primary key
            sql_query = text(f"""
                SELECT id FROM {event_table} 
                WHERE {relationship_column} = {entity_id + 1}
                ORDER BY id
            """)
            result = session.execute(sql_query)
            event_ids = [row[0] for row in result]
            
            # Process each event in order
            for event_id in event_ids:
                # Get event duration
                duration_minutes = generate_from_distribution(
                    event_sim.event_duration.get('distribution', {})
                ) * 24 * 60  # Convert days to minutes
                
                # Record event start time
                event_start_time = self.env.now
                
                # Allocate resources for this event
                required_resources = self._determine_required_resources(event_id)
                
                # Request all required resources
                resource_requests = []
                resource_allocation_times = {}
                
                for resource_key in required_resources:
                    resource = self.resources.get(resource_key)
                    if resource:
                        # Check if work shifts are enabled and if the resource is available
                        if self._are_work_shifts_enabled():
                            # Wait until the resource is on shift
                            next_shift_time = self._wait_until_resource_available(resource_key)
                            if next_shift_time > self.env.now:
                                yield self.env.timeout(next_shift_time - self.env.now)
                        
                        # Now request the resource
                        request = resource.request()
                        resource_requests.append((resource_key, request))
                
                # Wait for all resources to be available
                for resource_key, request in resource_requests:
                    yield request
                    # Record resource allocation time
                    resource_allocation_times[resource_key] = self.env.now
                
                # Process the event (wait for duration)
                # If work shifts are enabled, we need to account for off-shift time
                if self._are_work_shifts_enabled():
                    remaining_duration = duration_minutes
                    while remaining_duration > 0:
                        # Calculate how long until the next shift change for any resource
                        next_shift_change = self._calculate_next_shift_change(required_resources)
                        
                        # If next shift change is before we finish, pause work
                        if next_shift_change is not None and next_shift_change < self.env.now + remaining_duration:
                            # Work until shift change
                            work_time = next_shift_change - self.env.now
                            yield self.env.timeout(work_time)
                            remaining_duration -= work_time
                            
                            # Wait until resources are available again
                            next_available_time = self._calculate_next_available_time(required_resources)
                            if next_available_time > self.env.now:
                                yield self.env.timeout(next_available_time - self.env.now)
                        else:
                            # No shift changes before we finish, complete the work
                            yield self.env.timeout(remaining_duration)
                            remaining_duration = 0
                else:
                    # No work shifts, just wait for the duration
                    yield self.env.timeout(duration_minutes)
                
                # Record event end time
                event_end_time = self.env.now
                
                # Record event processing
                self.event_tracker.record_event_processing(
                    event_table=event_table,
                    event_id=event_id,
                    entity_id=entity_id + 1,  # Database IDs typically start at 1
                    start_time=event_start_time,
                    end_time=event_end_time
                )
                
                # Release all resources and record allocations
                for resource_key, request in resource_requests:
                    resource = self.resources.get(resource_key)
                    if resource:
                        resource.release(request)
                        
                        # Parse resource key to get table and ID
                        table_name, resource_id = resource_key.split('_')
                        
                        # Record resource allocation
                        self.event_tracker.record_resource_allocation(
                            event_id=event_id,
                            resource_table=table_name,
                            resource_id=int(resource_id),
                            allocation_time=resource_allocation_times[resource_key],
                            release_time=self.env.now
                        )
                
                self.processed_events += 1
    
    def _determine_required_resources(self, event_id: int) -> List[str]:
        """
        Determine which resources are required for an event
        
        Args:
            event_id: Event ID
            
        Returns:
            List of resource keys
        """
        event_sim = self.config.event_simulation
        if not event_sim:
            return []
            
        required_resources = []
        
        with Session(self.engine) as session:
            # Get the event type to determine specific resource requirements
            event_table = event_sim.event_table
            sql_query = text(f"SELECT type FROM {event_table} WHERE id = {event_id}")
            result = session.execute(sql_query)
            event_type = None
            for row in result:
                event_type = row[0]
                break
                
            for resource_config in event_sim.resource_requirements:
                table_name = resource_config.resource_table
                
                for req in resource_config.requirements:
                    resource_type = req.resource_type
                    
                    # Determine how many resources of this type are needed
                    count = req.count
                    if isinstance(count, dict) and 'distribution' in count:
                        count = int(generate_from_distribution(count['distribution']))
                    else:
                        count = int(count)
                    
                    # Get available resources of this type
                    sql_query = text(f"""
                        SELECT id FROM {table_name} 
                        WHERE {resource_config.type_column} = '{resource_type}'
                    """)
                    result = session.execute(sql_query)
                    resource_ids = [row[0] for row in result]
                    
                    # Randomly select the required number of resources
                    if resource_ids and count > 0:
                        selected_ids = random.sample(
                            resource_ids, 
                            min(count, len(resource_ids))
                        )
                        for resource_id in selected_ids:
                            required_resources.append(f"{table_name}_{resource_id}")
        
        return required_resources
    
    def _are_work_shifts_enabled(self) -> bool:
        """Check if work shifts are enabled in the configuration"""
        event_sim = self.config.event_simulation
        if not event_sim or not event_sim.work_shifts:
            return False
        
        return event_sim.work_shifts.enabled
    
    def _get_shift_pattern(self, pattern_name: str) -> Optional[ShiftPattern]:
        """Get a shift pattern by name"""
        event_sim = self.config.event_simulation
        if not event_sim or not event_sim.work_shifts:
            return None
        
        for pattern in event_sim.work_shifts.shift_patterns:
            if pattern.name == pattern_name:
                return pattern
        
        return None
    
    def _get_resource_shift_patterns(self, resource_type: str) -> List[ShiftPattern]:
        """Get shift patterns for a resource type"""
        event_sim = self.config.event_simulation
        if not event_sim or not event_sim.work_shifts:
            return []
        
        patterns = []
        for resource_shift in event_sim.work_shifts.resource_shifts:
            if resource_shift.resource_type == resource_type:
                if isinstance(resource_shift.shift_pattern, list):
                    for pattern_name in resource_shift.shift_pattern:
                        pattern = self._get_shift_pattern(pattern_name)
                        if pattern:
                            patterns.append(pattern)
                else:
                    pattern = self._get_shift_pattern(resource_shift.shift_pattern)
                    if pattern:
                        patterns.append(pattern)
        
        return patterns
    
    def _is_resource_on_shift(self, resource_key: str, sim_time: Optional[float] = None) -> bool:
        """
        Check if a resource is on shift at the given simulation time
        
        Args:
            resource_key: Resource key (e.g., "Consultant_1")
            sim_time: Simulation time in minutes (defaults to current time)
            
        Returns:
            True if the resource is on shift, False otherwise
        """
        if not self._are_work_shifts_enabled():
            return True
        
        if sim_time is None:
            sim_time = self.env.now
        
        # Get the resource type
        resource_type = self.resource_types.get(resource_key)
        if not resource_type:
            return True  # If we don't know the resource type, assume it's always available
        
        # Get the shift patterns for this resource type
        shift_patterns = self._get_resource_shift_patterns(resource_type)
        if not shift_patterns:
            return True  # If no shift patterns are defined, assume the resource is always available
        
        # Convert simulation time to datetime
        sim_datetime = self.config.start_date + timedelta(minutes=sim_time)
        
        # Get day of week (0=Monday, 6=Sunday)
        day_of_week = sim_datetime.weekday()
        
        # Get time of day
        time_of_day = sim_datetime.time()
        
        # Check if the current time falls within any of the shift patterns
        for pattern in shift_patterns:
            # Check if current day is in shift days
            if day_of_week in pattern.days:
                # Parse shift start and end times
                start_time = datetime.strptime(pattern.start_time, "%H:%M").time()
                end_time = datetime.strptime(pattern.end_time, "%H:%M").time()
                
                # Check if current time is within shift hours
                if start_time <= time_of_day < end_time:
                    return True
        
        return False
    
    def _wait_until_resource_available(self, resource_key: str) -> float:
        """
        Calculate the next time when a resource will be available
        
        Args:
            resource_key: Resource key (e.g., "Consultant_1")
            
        Returns:
            Simulation time in minutes when the resource will be available
        """
        if not self._are_work_shifts_enabled():
            return self.env.now
        
        # If the resource is already on shift, return current time
        if self._is_resource_on_shift(resource_key):
            return self.env.now
        
        # Get the resource type
        resource_type = self.resource_types.get(resource_key)
        if not resource_type:
            return self.env.now
        
        # Get the shift patterns for this resource type
        shift_patterns = self._get_resource_shift_patterns(resource_type)
        if not shift_patterns:
            return self.env.now
        
        # Start from current time and check each future minute until we find a time when the resource is on shift
        # This is a simplistic approach; in a real system, we would calculate this more efficiently
        sim_time = self.env.now
        max_minutes_to_check = 7 * 24 * 60  # Check up to one week ahead
        
        for minutes_ahead in range(1, max_minutes_to_check):
            check_time = sim_time + minutes_ahead
            if self._is_resource_on_shift(resource_key, check_time):
                return check_time
        
        # If we couldn't find a time when the resource is on shift, return a far future time
        logger.warning(f"Could not find a future time when resource {resource_key} is on shift")
        return sim_time + max_minutes_to_check
    
    def _calculate_next_shift_change(self, resource_keys: List[str]) -> Optional[float]:
        """
        Calculate the next time when any resource's shift status will change
        
        Args:
            resource_keys: List of resource keys
            
        Returns:
            Simulation time in minutes of the next shift change, or None if no shift changes are expected
        """
        if not self._are_work_shifts_enabled():
            return None
        
        # Get the current shift status for each resource
        current_status = {key: self._is_resource_on_shift(key) for key in resource_keys}
        
        # Start from current time and check each future minute until we find a time when any resource's shift status changes
        sim_time = self.env.now
        max_minutes_to_check = 24 * 60  # Check up to one day ahead
        
        for minutes_ahead in range(1, max_minutes_to_check):
            check_time = sim_time + minutes_ahead
            for key in resource_keys:
                new_status = self._is_resource_on_shift(key, check_time)
                if new_status != current_status[key]:
                    return check_time
        
        # If we couldn't find a shift change, return None
        return None
    
    def _calculate_next_available_time(self, resource_keys: List[str]) -> float:
        """
        Calculate the next time when all resources will be available
        
        Args:
            resource_keys: List of resource keys
            
        Returns:
            Simulation time in minutes when all resources will be available
        """
        if not self._are_work_shifts_enabled():
            return self.env.now
        
        # Find the latest time when any resource becomes available
        latest_time = self.env.now
        
        for key in resource_keys:
            available_time = self._wait_until_resource_available(key)
            if available_time > latest_time:
                latest_time = available_time
        
        return latest_time